/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getMonth, getDaysInMonth, format, addDays } from 'date-fns';
var Month = /** @class */ (function () {
    function Month(date, year, calendar) {
        this.date = date;
        this.year = year;
        this.calendar = calendar;
        this.days = [];
        this.ofYear = getMonth(date);
        this.name = format(date, 'MMMM');
        this.days.push(calendar.factory.createDay(date));
        for (var d = 0; d < getDaysInMonth(date) - 1; d++) {
            date = addDays(date, 1);
            this.days.push(calendar.factory.createDay(date));
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    Month.prototype.setDay = /**
     * @param {?} day
     * @return {?}
     */
    function (day) {
        /** @type {?} */
        var dayIndex = this.days.findIndex(function (d) { return d.date === day.date; });
        if (dayIndex >= 0) {
            this.days.splice(dayIndex, 1, day);
        }
    };
    /**
     * @return {?}
     */
    Month.prototype.getCalendarView = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var days = this.days.slice();
        /** @type {?} */
        var firstDayOfMonth = this.days[0].dayOfWeek;
        /** @type {?} */
        var monthConfig = this.calendar.config.month;
        if (firstDayOfMonth !== monthConfig.firstDay) {
            /** @type {?} */
            var previousMonth = this.year.previousMonth(this);
            /** @type {?} */
            var previousDays = previousMonth.days.slice(previousMonth.days.length - (((firstDayOfMonth - monthConfig.firstDay) + 7) % 7), previousMonth.days.length);
            days = previousDays.concat(days);
        }
        if (days.length < Month.DAYS_IN_CALENDAR_VIEW) {
            /** @type {?} */
            var nextMonth = this.year.nextMonth(this);
            /** @type {?} */
            var forwardDays = nextMonth.days.slice(0, Month.DAYS_IN_CALENDAR_VIEW - days.length);
            days = days.concat(forwardDays);
        }
        else if (days.length > Month.DAYS_IN_CALENDAR_VIEW) {
            /** @type {?} */
            var nextMonth = this.year.nextMonth(this);
            /** @type {?} */
            var forwardDays = nextMonth.days.slice(0, (Month.DAYS_IN_CALENDAR_VIEW + 7) - days.length);
            days = days.concat(forwardDays);
        }
        return days.reduce(function (acc, curr, i) {
            if (curr.dayOfWeek === monthConfig.firstDay || i === 0) {
                acc.push([]);
            }
            if ((!monthConfig.hideWeekends || !curr.isWeekend) && acc[acc.length - 1]) {
                acc[acc.length - 1].push(curr);
            }
            return acc;
        }, new Array());
    };
    Month.DAYS_IN_CALENDAR_VIEW = 35;
    return Month;
}());
export { Month };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Month.DAYS_IN_CALENDAR_VIEW;
    /** @type {?} */
    Month.prototype.name;
    /** @type {?} */
    Month.prototype.ofYear;
    /** @type {?} */
    Month.prototype.days;
    /**
     * @type {?}
     * @private
     */
    Month.prototype.date;
    /** @type {?} */
    Month.prototype.year;
    /** @type {?} */
    Month.prototype.calendar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGguY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90cmItY2FsZW5kYXIvIiwic291cmNlcyI6WyJzcmMvbGliL2NhbGVuZGFyL21vbnRoL21vbnRoLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQ0gsUUFBUSxFQUNSLGNBQWMsRUFDZCxNQUFNLEVBQ04sT0FBTyxFQUNULE1BQU0sVUFBVSxDQUFDO0FBTW5CO0lBTUksZUFBb0IsSUFBVSxFQUFrQixJQUFXLEVBQWtCLFFBQWtCO1FBQTNFLFNBQUksR0FBSixJQUFJLENBQU07UUFBa0IsU0FBSSxHQUFKLElBQUksQ0FBTztRQUFrQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRi9FLFNBQUksR0FBVyxFQUFFLENBQUM7UUFHOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFakQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDtJQUNMLENBQUM7Ozs7O0lBRUQsc0JBQU07Ozs7SUFBTixVQUFPLEdBQVM7O1lBQ04sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQUEs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LHFCQUE2Qjs7SUFDN0IsdUJBQStCOztJQUMvQixxQkFBa0M7Ozs7O0lBRXRCLHFCQUFrQjs7SUFBRSxxQkFBMkI7O0lBQUUseUJBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSU1vbnRoIH0gZnJvbSAnLi9tb250aC5pbnRlcmZhY2UnO1xuaW1wb3J0IHtcbiAgICBnZXRNb250aCxcbiAgICBnZXREYXlzSW5Nb250aCxcbiAgICBmb3JtYXQsXG4gICAgYWRkRGF5c1xuIH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IHsgSVllYXIgfSBmcm9tICcuLi95ZWFyL3llYXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IENhbGVuZGFyIH0gZnJvbSAnLi4vY2FsZW5kYXInO1xuaW1wb3J0IHsgSURheSB9IGZyb20gJy4uL2RheS9kYXkuaW50ZXJmYWNlJztcblxuXG5leHBvcnQgY2xhc3MgTW9udGggaW1wbGVtZW50cyBJTW9udGgge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERBWVNfSU5fQ0FMRU5EQVJfVklFVyA9IDM1O1xuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHJlYWRvbmx5IG9mWWVhcjogbnVtYmVyO1xuICAgIHB1YmxpYyByZWFkb25seSBkYXlzOiBJRGF5W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0ZTogRGF0ZSwgcHVibGljIHJlYWRvbmx5IHllYXI6IElZZWFyLCBwdWJsaWMgcmVhZG9ubHkgY2FsZW5kYXI6IENhbGVuZGFyKSB7XG4gICAgICAgIHRoaXMub2ZZZWFyID0gZ2V0TW9udGgoZGF0ZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IGZvcm1hdChkYXRlLCAnTU1NTScpO1xuXG4gICAgICAgIHRoaXMuZGF5cy5wdXNoKGNhbGVuZGFyLmZhY3RvcnkuY3JlYXRlRGF5KGRhdGUpKTtcblxuICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IGdldERheXNJbk1vbnRoKGRhdGUpIC0gMTsgZCsrKSB7XG4gICAgICAgICAgICBkYXRlID0gYWRkRGF5cyhkYXRlLCAxKTtcbiAgICAgICAgICAgIHRoaXMuZGF5cy5wdXNoKGNhbGVuZGFyLmZhY3RvcnkuY3JlYXRlRGF5KGRhdGUpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldERheShkYXk6IElEYXkpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZGF5SW5kZXggPSB0aGlzLmRheXMuZmluZEluZGV4KGQgPT4gZC5kYXRlID09PSBkYXkuZGF0ZSk7XG5cbiAgICAgICAgaWYgKGRheUluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGF5cy5zcGxpY2UoZGF5SW5kZXgsIDEsIGRheSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRDYWxlbmRhclZpZXcoKTogSURheVtdW10ge1xuICAgICAgICBsZXQgZGF5cyA9IHRoaXMuZGF5cy5zbGljZSgpO1xuICAgICAgICBjb25zdCBmaXJzdERheU9mTW9udGggPSB0aGlzLmRheXNbMF0uZGF5T2ZXZWVrO1xuICAgICAgICBjb25zdCBtb250aENvbmZpZyA9IHRoaXMuY2FsZW5kYXIuY29uZmlnLm1vbnRoO1xuXG4gICAgICAgIGlmIChmaXJzdERheU9mTW9udGggIT09IG1vbnRoQ29uZmlnLmZpcnN0RGF5KSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c01vbnRoID0gdGhpcy55ZWFyLnByZXZpb3VzTW9udGgodGhpcyk7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c0RheXMgPSBwcmV2aW91c01vbnRoLmRheXMuc2xpY2UoXG4gICAgICAgICAgICAgICAgcHJldmlvdXNNb250aC5kYXlzLmxlbmd0aCAtICgoKGZpcnN0RGF5T2ZNb250aCAtIG1vbnRoQ29uZmlnLmZpcnN0RGF5KSArIDcpICUgNyksXG4gICAgICAgICAgICAgICAgcHJldmlvdXNNb250aC5kYXlzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGRheXMgPSBwcmV2aW91c0RheXMuY29uY2F0KGRheXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRheXMubGVuZ3RoIDwgTW9udGguREFZU19JTl9DQUxFTkRBUl9WSUVXKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0TW9udGggPSB0aGlzLnllYXIubmV4dE1vbnRoKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgZm9yd2FyZERheXMgPSBuZXh0TW9udGguZGF5cy5zbGljZSgwLCBNb250aC5EQVlTX0lOX0NBTEVOREFSX1ZJRVcgLSBkYXlzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGRheXMgPSBkYXlzLmNvbmNhdChmb3J3YXJkRGF5cyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF5cy5sZW5ndGggPiBNb250aC5EQVlTX0lOX0NBTEVOREFSX1ZJRVcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRNb250aCA9IHRoaXMueWVhci5uZXh0TW9udGgodGhpcyk7XG4gICAgICAgICAgICBjb25zdCBmb3J3YXJkRGF5cyA9IG5leHRNb250aC5kYXlzLnNsaWNlKDAsIChNb250aC5EQVlTX0lOX0NBTEVOREFSX1ZJRVcgKyA3KSAtIGRheXMubGVuZ3RoKTtcblxuICAgICAgICAgICAgZGF5cyA9IGRheXMuY29uY2F0KGZvcndhcmREYXlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXlzLnJlZHVjZSgoYWNjOiBJRGF5W11bXSwgY3VycjogSURheSwgaTogbnVtYmVyKSA9PiB7XG5cbiAgICAgICAgICAgIGlmIChjdXJyLmRheU9mV2VlayA9PT0gbW9udGhDb25maWcuZmlyc3REYXkgfHwgaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFjYy5wdXNoKFtdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCghbW9udGhDb25maWcuaGlkZVdlZWtlbmRzIHx8ICFjdXJyLmlzV2Vla2VuZCkgJiYgYWNjW2FjYy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgIGFjY1thY2MubGVuZ3RoIC0gMV0ucHVzaChjdXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwgbmV3IEFycmF5PEFycmF5PElEYXk+PigpKTtcblxuICAgIH1cblxuXG5cblxufVxuIl19