/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getMonth, getDaysInMonth, format, addDays } from 'date-fns';
var Month = /** @class */ (function () {
    function Month(date, year, calendar) {
        this.date = date;
        this.year = year;
        this.calendar = calendar;
        this.days = [];
        this.ofYear = getMonth(date);
        this.name = format(date, 'MMMM');
        this.days.push(calendar.factory.createDay(date));
        for (var d = 0; d < getDaysInMonth(date) - 1; d++) {
            date = addDays(date, 1);
            this.days.push(calendar.factory.createDay(date));
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    Month.prototype.setDay = /**
     * @param {?} day
     * @return {?}
     */
    function (day) {
        /** @type {?} */
        var dayIndex = this.days.findIndex(function (d) { return d.date === day.date; });
        if (dayIndex >= 0) {
            this.days.splice(dayIndex, 1, day);
        }
        console.log(day.disabled);
    };
    /**
     * @return {?}
     */
    Month.prototype.getCalendarView = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var days = this.days.slice();
        /** @type {?} */
        var firstDayOfMonth = this.days[0].dayOfWeek;
        /** @type {?} */
        var monthConfig = this.calendar.config.month;
        if (firstDayOfMonth !== monthConfig.firstDay) {
            /** @type {?} */
            var previousMonth = this.year.previousMonth(this);
            /** @type {?} */
            var previousDays = previousMonth.days.slice(previousMonth.days.length - (((firstDayOfMonth - monthConfig.firstDay) + 7) % 7), previousMonth.days.length);
            days = previousDays.concat(days);
        }
        if (days.length < Month.DAYS_IN_CALENDAR_VIEW) {
            /** @type {?} */
            var nextMonth = this.year.nextMonth(this);
            /** @type {?} */
            var forwardDays = nextMonth.days.slice(0, Month.DAYS_IN_CALENDAR_VIEW - days.length);
            days = days.concat(forwardDays);
        }
        else if (days.length > Month.DAYS_IN_CALENDAR_VIEW) {
            /** @type {?} */
            var nextMonth = this.year.nextMonth(this);
            /** @type {?} */
            var forwardDays = nextMonth.days.slice(0, (Month.DAYS_IN_CALENDAR_VIEW + 7) - days.length);
            days = days.concat(forwardDays);
        }
        return days.reduce(function (acc, curr, i) {
            if (curr.dayOfWeek === monthConfig.firstDay || i === 0) {
                acc.push([]);
            }
            if ((!monthConfig.hideWeekends || !curr.isWeekend) && acc[acc.length - 1]) {
                acc[acc.length - 1].push(curr);
            }
            return acc;
        }, new Array());
    };
    Month.DAYS_IN_CALENDAR_VIEW = 35;
    return Month;
}());
export { Month };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Month.DAYS_IN_CALENDAR_VIEW;
    /** @type {?} */
    Month.prototype.name;
    /** @type {?} */
    Month.prototype.ofYear;
    /** @type {?} */
    Month.prototype.days;
    /**
     * @type {?}
     * @private
     */
    Month.prototype.date;
    /** @type {?} */
    Month.prototype.year;
    /** @type {?} */
    Month.prototype.calendar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGguY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90cmItY2FsZW5kYXIvIiwic291cmNlcyI6WyJzcmMvbGliL2NhbGVuZGFyL21vbnRoL21vbnRoLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQ0gsUUFBUSxFQUNSLGNBQWMsRUFDZCxNQUFNLEVBQ04sT0FBTyxFQUNULE1BQU0sVUFBVSxDQUFBO0FBTWxCO0lBTUksZUFBb0IsSUFBUyxFQUFrQixJQUFVLEVBQWtCLFFBQWlCO1FBQXhFLFNBQUksR0FBSixJQUFJLENBQUs7UUFBa0IsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUFrQixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBRjVFLFNBQUksR0FBVyxFQUFFLENBQUE7UUFHN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBRWhDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFFaEQsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUM7WUFDM0MsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtTQUNuRDtJQUNMLENBQUM7Ozs7O0lBRUQsc0JBQU07Ozs7SUFBTixVQUFPLEdBQVE7O1lBQ1AsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQUEs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QUFBLEFBdkVELElBdUVDO1NBdkVZLEtBQUs7Ozs7OztJQUNkLDRCQUFrRDs7SUFDbEQscUJBQTRCOztJQUM1Qix1QkFBNkI7O0lBQzdCLHFCQUFpQzs7Ozs7SUFFckIscUJBQWlCOztJQUFFLHFCQUEwQjs7SUFBRSx5QkFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTW9udGggfSBmcm9tICcuL21vbnRoLmludGVyZmFjZSc7XG5pbXBvcnQgeyBcbiAgICBnZXRNb250aCwgIFxuICAgIGdldERheXNJbk1vbnRoLFxuICAgIGZvcm1hdCxcbiAgICBhZGREYXlzXG4gfSBmcm9tICdkYXRlLWZucydcbmltcG9ydCB7IElZZWFyIH0gZnJvbSAnLi4veWVhci95ZWFyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4uL2NhbGVuZGFyJztcbmltcG9ydCB7IElEYXkgfSBmcm9tICcuLi9kYXkvZGF5LmludGVyZmFjZSc7XG5cblxuZXhwb3J0IGNsYXNzIE1vbnRoIGltcGxlbWVudHMgSU1vbnRoIHtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBEQVlTX0lOX0NBTEVOREFSX1ZJRVcgPSAzNVxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmdcbiAgICBwdWJsaWMgcmVhZG9ubHkgb2ZZZWFyOm51bWJlclxuICAgIHB1YmxpYyByZWFkb25seSBkYXlzOiBJRGF5W10gPSBbXVxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0ZTpEYXRlLCBwdWJsaWMgcmVhZG9ubHkgeWVhcjpJWWVhciwgcHVibGljIHJlYWRvbmx5IGNhbGVuZGFyOkNhbGVuZGFyKXtcbiAgICAgICAgdGhpcy5vZlllYXIgPSBnZXRNb250aChkYXRlKVxuICAgICAgICB0aGlzLm5hbWUgPSBmb3JtYXQoZGF0ZSwgJ01NTU0nKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kYXlzLnB1c2goY2FsZW5kYXIuZmFjdG9yeS5jcmVhdGVEYXkoZGF0ZSkpXG5cbiAgICAgICAgZm9yKGxldCBkID0gMDsgZCA8IGdldERheXNJbk1vbnRoKGRhdGUpLTE7IGQrKyl7XG4gICAgICAgICAgICBkYXRlID0gYWRkRGF5cyhkYXRlLCAxKVxuICAgICAgICAgICAgdGhpcy5kYXlzLnB1c2goY2FsZW5kYXIuZmFjdG9yeS5jcmVhdGVEYXkoZGF0ZSkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXREYXkoZGF5OklEYXkpOiB2b2lke1xuICAgICAgICBsZXQgZGF5SW5kZXggPSB0aGlzLmRheXMuZmluZEluZGV4KGQgPT4gZC5kYXRlID09PSBkYXkuZGF0ZSlcblxuICAgICAgICBpZihkYXlJbmRleCA+PSAwKXtcbiAgICAgICAgICAgIHRoaXMuZGF5cy5zcGxpY2UoZGF5SW5kZXgsIDEsIGRheSlcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhkYXkuZGlzYWJsZWQpXG4gICAgfVxuXG4gICAgZ2V0Q2FsZW5kYXJWaWV3KCk6SURheVtdW10ge1xuICAgICAgICBsZXQgZGF5cyA9IHRoaXMuZGF5cy5zbGljZSgpXG4gICAgICAgIGNvbnN0IGZpcnN0RGF5T2ZNb250aCA9IHRoaXMuZGF5c1swXS5kYXlPZldlZWtcbiAgICAgICAgY29uc3QgbW9udGhDb25maWcgPSB0aGlzLmNhbGVuZGFyLmNvbmZpZy5tb250aFxuICAgICAgICBcbiAgICAgICAgaWYoZmlyc3REYXlPZk1vbnRoICE9PSBtb250aENvbmZpZy5maXJzdERheSl7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c01vbnRoID0gdGhpcy55ZWFyLnByZXZpb3VzTW9udGgodGhpcylcbiAgICAgICAgICAgIGxldCBwcmV2aW91c0RheXMgPSBwcmV2aW91c01vbnRoLmRheXMuc2xpY2UoXG4gICAgICAgICAgICAgICAgcHJldmlvdXNNb250aC5kYXlzLmxlbmd0aCAtICgoKGZpcnN0RGF5T2ZNb250aCAtIG1vbnRoQ29uZmlnLmZpcnN0RGF5KSArIDcpICUgNyksIFxuICAgICAgICAgICAgICAgIHByZXZpb3VzTW9udGguZGF5cy5sZW5ndGgpXG5cbiAgICAgICAgICAgIGRheXMgPSBwcmV2aW91c0RheXMuY29uY2F0KGRheXMpXG4gICAgICAgIH1cblxuICAgICAgICBpZihkYXlzLmxlbmd0aCA8IE1vbnRoLkRBWVNfSU5fQ0FMRU5EQVJfVklFVyl7XG4gICAgICAgICAgICBjb25zdCBuZXh0TW9udGggPSB0aGlzLnllYXIubmV4dE1vbnRoKHRoaXMpXG4gICAgICAgICAgICBsZXQgZm9yd2FyZERheXMgPSBuZXh0TW9udGguZGF5cy5zbGljZSgwLCBNb250aC5EQVlTX0lOX0NBTEVOREFSX1ZJRVcgLSBkYXlzLmxlbmd0aClcblxuICAgICAgICAgICAgZGF5cyA9IGRheXMuY29uY2F0KGZvcndhcmREYXlzKVxuICAgICAgICB9IGVsc2UgaWYoZGF5cy5sZW5ndGggPiBNb250aC5EQVlTX0lOX0NBTEVOREFSX1ZJRVcpe1xuICAgICAgICAgICAgY29uc3QgbmV4dE1vbnRoID0gdGhpcy55ZWFyLm5leHRNb250aCh0aGlzKVxuICAgICAgICAgICAgbGV0IGZvcndhcmREYXlzID0gbmV4dE1vbnRoLmRheXMuc2xpY2UoMCwgKE1vbnRoLkRBWVNfSU5fQ0FMRU5EQVJfVklFVyArIDcpIC0gZGF5cy5sZW5ndGgpXG5cbiAgICAgICAgICAgIGRheXMgPSBkYXlzLmNvbmNhdChmb3J3YXJkRGF5cylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXlzLnJlZHVjZSgoYWNjOklEYXlbXVtdLCBjdXJyOklEYXksIGk6bnVtYmVyKSA9PiB7XG5cbiAgICAgICAgICAgIGlmKGN1cnIuZGF5T2ZXZWVrID09PSBtb250aENvbmZpZy5maXJzdERheSB8fCBpID09PSAwKXtcbiAgICAgICAgICAgICAgICBhY2MucHVzaChbXSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoKCFtb250aENvbmZpZy5oaWRlV2Vla2VuZHMgfHwgIWN1cnIuaXNXZWVrZW5kKSAmJiBhY2NbYWNjLmxlbmd0aC0xXSl7XG4gICAgICAgICAgICAgICAgYWNjW2FjYy5sZW5ndGgtMV0ucHVzaChjdXJyKVxuICAgICAgICAgICAgfSAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgfSwgbmV3IEFycmF5PEFycmF5PElEYXk+PigpKVxuXG4gICAgfVxuXG5cblxuICAgIFxufSJdfQ==