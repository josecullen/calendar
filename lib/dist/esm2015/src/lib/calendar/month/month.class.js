/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getMonth, getDaysInMonth, format, addDays } from 'date-fns';
export class Month {
    /**
     * @param {?} date
     * @param {?} year
     * @param {?} calendar
     */
    constructor(date, year, calendar) {
        this.date = date;
        this.year = year;
        this.calendar = calendar;
        this.days = [];
        this.ofYear = getMonth(date);
        this.name = format(date, 'MMMM');
        this.days.push(calendar.factory.createDay(date));
        for (let d = 0; d < getDaysInMonth(date) - 1; d++) {
            date = addDays(date, 1);
            this.days.push(calendar.factory.createDay(date));
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    setDay(day) {
        /** @type {?} */
        let dayIndex = this.days.findIndex(d => d.date === day.date);
        if (dayIndex >= 0) {
            this.days.splice(dayIndex, 1, day);
        }
        console.log(day.disabled);
    }
    /**
     * @return {?}
     */
    getCalendarView() {
        /** @type {?} */
        let days = this.days.slice();
        /** @type {?} */
        const firstDayOfMonth = this.days[0].dayOfWeek;
        /** @type {?} */
        const monthConfig = this.calendar.config.month;
        if (firstDayOfMonth !== monthConfig.firstDay) {
            /** @type {?} */
            const previousMonth = this.year.previousMonth(this);
            /** @type {?} */
            let previousDays = previousMonth.days.slice(previousMonth.days.length - (((firstDayOfMonth - monthConfig.firstDay) + 7) % 7), previousMonth.days.length);
            days = previousDays.concat(days);
        }
        if (days.length < Month.DAYS_IN_CALENDAR_VIEW) {
            /** @type {?} */
            const nextMonth = this.year.nextMonth(this);
            /** @type {?} */
            let forwardDays = nextMonth.days.slice(0, Month.DAYS_IN_CALENDAR_VIEW - days.length);
            days = days.concat(forwardDays);
        }
        else if (days.length > Month.DAYS_IN_CALENDAR_VIEW) {
            /** @type {?} */
            const nextMonth = this.year.nextMonth(this);
            /** @type {?} */
            let forwardDays = nextMonth.days.slice(0, (Month.DAYS_IN_CALENDAR_VIEW + 7) - days.length);
            days = days.concat(forwardDays);
        }
        return days.reduce((acc, curr, i) => {
            if (curr.dayOfWeek === monthConfig.firstDay || i === 0) {
                acc.push([]);
            }
            if ((!monthConfig.hideWeekends || !curr.isWeekend) && acc[acc.length - 1]) {
                acc[acc.length - 1].push(curr);
            }
            return acc;
        }, new Array());
    }
}
Month.DAYS_IN_CALENDAR_VIEW = 35;
if (false) {
    /**
     * @type {?}
     * @private
     */
    Month.DAYS_IN_CALENDAR_VIEW;
    /** @type {?} */
    Month.prototype.name;
    /** @type {?} */
    Month.prototype.ofYear;
    /** @type {?} */
    Month.prototype.days;
    /**
     * @type {?}
     * @private
     */
    Month.prototype.date;
    /** @type {?} */
    Month.prototype.year;
    /** @type {?} */
    Month.prototype.calendar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGguY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90cmItY2FsZW5kYXIvIiwic291cmNlcyI6WyJzcmMvbGliL2NhbGVuZGFyL21vbnRoL21vbnRoLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQ0gsUUFBUSxFQUNSLGNBQWMsRUFDZCxNQUFNLEVBQ04sT0FBTyxFQUNULE1BQU0sVUFBVSxDQUFBO0FBTWxCLE1BQU0sT0FBTyxLQUFLOzs7Ozs7SUFNZCxZQUFvQixJQUFTLEVBQWtCLElBQVUsRUFBa0IsUUFBaUI7UUFBeEUsU0FBSSxHQUFKLElBQUksQ0FBSztRQUFrQixTQUFJLEdBQUosSUFBSSxDQUFNO1FBQWtCLGFBQVEsR0FBUixRQUFRLENBQVM7UUFGNUUsU0FBSSxHQUFXLEVBQUUsQ0FBQTtRQUc3QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFFaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUVoRCxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBQztZQUMzQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1NBQ25EO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBUTs7WUFDUCxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFT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NEJBQWtEOztJQUNsRCxxQkFBNEI7O0lBQzVCLHVCQUE2Qjs7SUFDN0IscUJBQWlDOzs7OztJQUVyQixxQkFBaUI7O0lBQUUscUJBQTBCOztJQUFFLHlCQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElNb250aCB9IGZyb20gJy4vbW9udGguaW50ZXJmYWNlJztcbmltcG9ydCB7IFxuICAgIGdldE1vbnRoLCAgXG4gICAgZ2V0RGF5c0luTW9udGgsXG4gICAgZm9ybWF0LFxuICAgIGFkZERheXNcbiB9IGZyb20gJ2RhdGUtZm5zJ1xuaW1wb3J0IHsgSVllYXIgfSBmcm9tICcuLi95ZWFyL3llYXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IENhbGVuZGFyIH0gZnJvbSAnLi4vY2FsZW5kYXInO1xuaW1wb3J0IHsgSURheSB9IGZyb20gJy4uL2RheS9kYXkuaW50ZXJmYWNlJztcblxuXG5leHBvcnQgY2xhc3MgTW9udGggaW1wbGVtZW50cyBJTW9udGgge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IERBWVNfSU5fQ0FMRU5EQVJfVklFVyA9IDM1XG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZ1xuICAgIHB1YmxpYyByZWFkb25seSBvZlllYXI6bnVtYmVyXG4gICAgcHVibGljIHJlYWRvbmx5IGRheXM6IElEYXlbXSA9IFtdXG4gICAgXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlOkRhdGUsIHB1YmxpYyByZWFkb25seSB5ZWFyOklZZWFyLCBwdWJsaWMgcmVhZG9ubHkgY2FsZW5kYXI6Q2FsZW5kYXIpe1xuICAgICAgICB0aGlzLm9mWWVhciA9IGdldE1vbnRoKGRhdGUpXG4gICAgICAgIHRoaXMubmFtZSA9IGZvcm1hdChkYXRlLCAnTU1NTScpXG4gICAgICAgIFxuICAgICAgICB0aGlzLmRheXMucHVzaChjYWxlbmRhci5mYWN0b3J5LmNyZWF0ZURheShkYXRlKSlcblxuICAgICAgICBmb3IobGV0IGQgPSAwOyBkIDwgZ2V0RGF5c0luTW9udGgoZGF0ZSktMTsgZCsrKXtcbiAgICAgICAgICAgIGRhdGUgPSBhZGREYXlzKGRhdGUsIDEpXG4gICAgICAgICAgICB0aGlzLmRheXMucHVzaChjYWxlbmRhci5mYWN0b3J5LmNyZWF0ZURheShkYXRlKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldERheShkYXk6SURheSk6IHZvaWR7XG4gICAgICAgIGxldCBkYXlJbmRleCA9IHRoaXMuZGF5cy5maW5kSW5kZXgoZCA9PiBkLmRhdGUgPT09IGRheS5kYXRlKVxuXG4gICAgICAgIGlmKGRheUluZGV4ID49IDApe1xuICAgICAgICAgICAgdGhpcy5kYXlzLnNwbGljZShkYXlJbmRleCwgMSwgZGF5KVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKGRheS5kaXNhYmxlZClcbiAgICB9XG5cbiAgICBnZXRDYWxlbmRhclZpZXcoKTpJRGF5W11bXSB7XG4gICAgICAgIGxldCBkYXlzID0gdGhpcy5kYXlzLnNsaWNlKClcbiAgICAgICAgY29uc3QgZmlyc3REYXlPZk1vbnRoID0gdGhpcy5kYXlzWzBdLmRheU9mV2Vla1xuICAgICAgICBjb25zdCBtb250aENvbmZpZyA9IHRoaXMuY2FsZW5kYXIuY29uZmlnLm1vbnRoXG4gICAgICAgIFxuICAgICAgICBpZihmaXJzdERheU9mTW9udGggIT09IG1vbnRoQ29uZmlnLmZpcnN0RGF5KXtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzTW9udGggPSB0aGlzLnllYXIucHJldmlvdXNNb250aCh0aGlzKVxuICAgICAgICAgICAgbGV0IHByZXZpb3VzRGF5cyA9IHByZXZpb3VzTW9udGguZGF5cy5zbGljZShcbiAgICAgICAgICAgICAgICBwcmV2aW91c01vbnRoLmRheXMubGVuZ3RoIC0gKCgoZmlyc3REYXlPZk1vbnRoIC0gbW9udGhDb25maWcuZmlyc3REYXkpICsgNykgJSA3KSwgXG4gICAgICAgICAgICAgICAgcHJldmlvdXNNb250aC5kYXlzLmxlbmd0aClcblxuICAgICAgICAgICAgZGF5cyA9IHByZXZpb3VzRGF5cy5jb25jYXQoZGF5cylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGRheXMubGVuZ3RoIDwgTW9udGguREFZU19JTl9DQUxFTkRBUl9WSUVXKXtcbiAgICAgICAgICAgIGNvbnN0IG5leHRNb250aCA9IHRoaXMueWVhci5uZXh0TW9udGgodGhpcylcbiAgICAgICAgICAgIGxldCBmb3J3YXJkRGF5cyA9IG5leHRNb250aC5kYXlzLnNsaWNlKDAsIE1vbnRoLkRBWVNfSU5fQ0FMRU5EQVJfVklFVyAtIGRheXMubGVuZ3RoKVxuXG4gICAgICAgICAgICBkYXlzID0gZGF5cy5jb25jYXQoZm9yd2FyZERheXMpXG4gICAgICAgIH0gZWxzZSBpZihkYXlzLmxlbmd0aCA+IE1vbnRoLkRBWVNfSU5fQ0FMRU5EQVJfVklFVyl7XG4gICAgICAgICAgICBjb25zdCBuZXh0TW9udGggPSB0aGlzLnllYXIubmV4dE1vbnRoKHRoaXMpXG4gICAgICAgICAgICBsZXQgZm9yd2FyZERheXMgPSBuZXh0TW9udGguZGF5cy5zbGljZSgwLCAoTW9udGguREFZU19JTl9DQUxFTkRBUl9WSUVXICsgNykgLSBkYXlzLmxlbmd0aClcblxuICAgICAgICAgICAgZGF5cyA9IGRheXMuY29uY2F0KGZvcndhcmREYXlzKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRheXMucmVkdWNlKChhY2M6SURheVtdW10sIGN1cnI6SURheSwgaTpudW1iZXIpID0+IHtcblxuICAgICAgICAgICAgaWYoY3Vyci5kYXlPZldlZWsgPT09IG1vbnRoQ29uZmlnLmZpcnN0RGF5IHx8IGkgPT09IDApe1xuICAgICAgICAgICAgICAgIGFjYy5wdXNoKFtdKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZigoIW1vbnRoQ29uZmlnLmhpZGVXZWVrZW5kcyB8fCAhY3Vyci5pc1dlZWtlbmQpICYmIGFjY1thY2MubGVuZ3RoLTFdKXtcbiAgICAgICAgICAgICAgICBhY2NbYWNjLmxlbmd0aC0xXS5wdXNoKGN1cnIpXG4gICAgICAgICAgICB9ICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgICB9LCBuZXcgQXJyYXk8QXJyYXk8SURheT4+KCkpXG5cbiAgICB9XG5cblxuXG4gICAgXG59Il19