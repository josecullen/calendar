/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getMonth, getDaysInMonth, format, addDays } from 'date-fns';
export class Month {
    /**
     * @param {?} date
     * @param {?} year
     * @param {?} calendar
     */
    constructor(date, year, calendar) {
        this.date = date;
        this.year = year;
        this.calendar = calendar;
        this.days = [];
        this.ofYear = getMonth(date);
        this.name = format(date, 'MMMM');
        this.days.push(calendar.factory.createDay(date));
        for (let d = 0; d < getDaysInMonth(date) - 1; d++) {
            date = addDays(date, 1);
            this.days.push(calendar.factory.createDay(date));
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    setDay(day) {
        /** @type {?} */
        const dayIndex = this.days.findIndex(d => d.date === day.date);
        if (dayIndex >= 0) {
            this.days.splice(dayIndex, 1, day);
        }
    }
    /**
     * @return {?}
     */
    getCalendarView() {
        /** @type {?} */
        let days = this.days.slice();
        /** @type {?} */
        const firstDayOfMonth = this.days[0].dayOfWeek;
        /** @type {?} */
        const monthConfig = this.calendar.config.month;
        if (firstDayOfMonth !== monthConfig.firstDay) {
            /** @type {?} */
            const previousMonth = this.year.previousMonth(this);
            /** @type {?} */
            const previousDays = previousMonth.days.slice(previousMonth.days.length - (((firstDayOfMonth - monthConfig.firstDay) + 7) % 7), previousMonth.days.length);
            days = previousDays.concat(days);
        }
        if (days.length < Month.DAYS_IN_CALENDAR_VIEW) {
            /** @type {?} */
            const nextMonth = this.year.nextMonth(this);
            /** @type {?} */
            const forwardDays = nextMonth.days.slice(0, Month.DAYS_IN_CALENDAR_VIEW - days.length);
            days = days.concat(forwardDays);
        }
        else if (days.length > Month.DAYS_IN_CALENDAR_VIEW) {
            /** @type {?} */
            const nextMonth = this.year.nextMonth(this);
            /** @type {?} */
            const forwardDays = nextMonth.days.slice(0, (Month.DAYS_IN_CALENDAR_VIEW + 7) - days.length);
            days = days.concat(forwardDays);
        }
        return days.reduce((acc, curr, i) => {
            if (curr.dayOfWeek === monthConfig.firstDay || i === 0) {
                acc.push([]);
            }
            if ((!monthConfig.hideWeekends || !curr.isWeekend) && acc[acc.length - 1]) {
                acc[acc.length - 1].push(curr);
            }
            return acc;
        }, new Array());
    }
}
Month.DAYS_IN_CALENDAR_VIEW = 35;
if (false) {
    /**
     * @type {?}
     * @private
     */
    Month.DAYS_IN_CALENDAR_VIEW;
    /** @type {?} */
    Month.prototype.name;
    /** @type {?} */
    Month.prototype.ofYear;
    /** @type {?} */
    Month.prototype.days;
    /**
     * @type {?}
     * @private
     */
    Month.prototype.date;
    /** @type {?} */
    Month.prototype.year;
    /** @type {?} */
    Month.prototype.calendar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGguY2xhc3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly90cmItY2FsZW5kYXIvIiwic291cmNlcyI6WyJzcmMvbGliL2NhbGVuZGFyL21vbnRoL21vbnRoLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQ0gsUUFBUSxFQUNSLGNBQWMsRUFDZCxNQUFNLEVBQ04sT0FBTyxFQUNULE1BQU0sVUFBVSxDQUFDO0FBTW5CLE1BQU0sT0FBTyxLQUFLOzs7Ozs7SUFNZCxZQUFvQixJQUFVLEVBQWtCLElBQVcsRUFBa0IsUUFBa0I7UUFBM0UsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUFrQixTQUFJLEdBQUosSUFBSSxDQUFPO1FBQWtCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFGL0UsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUc5QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVqRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBUzs7Y0FDTixRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFT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Ozs7SUFFdEIscUJBQWtCOztJQUFFLHFCQUEyQjs7SUFBRSx5QkFBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTW9udGggfSBmcm9tICcuL21vbnRoLmludGVyZmFjZSc7XG5pbXBvcnQge1xuICAgIGdldE1vbnRoLFxuICAgIGdldERheXNJbk1vbnRoLFxuICAgIGZvcm1hdCxcbiAgICBhZGREYXlzXG4gfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgeyBJWWVhciB9IGZyb20gJy4uL3llYXIveWVhci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tICcuLi9jYWxlbmRhcic7XG5pbXBvcnQgeyBJRGF5IH0gZnJvbSAnLi4vZGF5L2RheS5pbnRlcmZhY2UnO1xuXG5cbmV4cG9ydCBjbGFzcyBNb250aCBpbXBsZW1lbnRzIElNb250aCB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREFZU19JTl9DQUxFTkRBUl9WSUVXID0gMzU7XG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICBwdWJsaWMgcmVhZG9ubHkgb2ZZZWFyOiBudW1iZXI7XG4gICAgcHVibGljIHJlYWRvbmx5IGRheXM6IElEYXlbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlOiBEYXRlLCBwdWJsaWMgcmVhZG9ubHkgeWVhcjogSVllYXIsIHB1YmxpYyByZWFkb25seSBjYWxlbmRhcjogQ2FsZW5kYXIpIHtcbiAgICAgICAgdGhpcy5vZlllYXIgPSBnZXRNb250aChkYXRlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gZm9ybWF0KGRhdGUsICdNTU1NJyk7XG5cbiAgICAgICAgdGhpcy5kYXlzLnB1c2goY2FsZW5kYXIuZmFjdG9yeS5jcmVhdGVEYXkoZGF0ZSkpO1xuXG4gICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgZ2V0RGF5c0luTW9udGgoZGF0ZSkgLSAxOyBkKyspIHtcbiAgICAgICAgICAgIGRhdGUgPSBhZGREYXlzKGRhdGUsIDEpO1xuICAgICAgICAgICAgdGhpcy5kYXlzLnB1c2goY2FsZW5kYXIuZmFjdG9yeS5jcmVhdGVEYXkoZGF0ZSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0RGF5KGRheTogSURheSk6IHZvaWQge1xuICAgICAgICBjb25zdCBkYXlJbmRleCA9IHRoaXMuZGF5cy5maW5kSW5kZXgoZCA9PiBkLmRhdGUgPT09IGRheS5kYXRlKTtcblxuICAgICAgICBpZiAoZGF5SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5kYXlzLnNwbGljZShkYXlJbmRleCwgMSwgZGF5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldENhbGVuZGFyVmlldygpOiBJRGF5W11bXSB7XG4gICAgICAgIGxldCBkYXlzID0gdGhpcy5kYXlzLnNsaWNlKCk7XG4gICAgICAgIGNvbnN0IGZpcnN0RGF5T2ZNb250aCA9IHRoaXMuZGF5c1swXS5kYXlPZldlZWs7XG4gICAgICAgIGNvbnN0IG1vbnRoQ29uZmlnID0gdGhpcy5jYWxlbmRhci5jb25maWcubW9udGg7XG5cbiAgICAgICAgaWYgKGZpcnN0RGF5T2ZNb250aCAhPT0gbW9udGhDb25maWcuZmlyc3REYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzTW9udGggPSB0aGlzLnllYXIucHJldmlvdXNNb250aCh0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzRGF5cyA9IHByZXZpb3VzTW9udGguZGF5cy5zbGljZShcbiAgICAgICAgICAgICAgICBwcmV2aW91c01vbnRoLmRheXMubGVuZ3RoIC0gKCgoZmlyc3REYXlPZk1vbnRoIC0gbW9udGhDb25maWcuZmlyc3REYXkpICsgNykgJSA3KSxcbiAgICAgICAgICAgICAgICBwcmV2aW91c01vbnRoLmRheXMubGVuZ3RoKTtcblxuICAgICAgICAgICAgZGF5cyA9IHByZXZpb3VzRGF5cy5jb25jYXQoZGF5cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF5cy5sZW5ndGggPCBNb250aC5EQVlTX0lOX0NBTEVOREFSX1ZJRVcpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRNb250aCA9IHRoaXMueWVhci5uZXh0TW9udGgodGhpcyk7XG4gICAgICAgICAgICBjb25zdCBmb3J3YXJkRGF5cyA9IG5leHRNb250aC5kYXlzLnNsaWNlKDAsIE1vbnRoLkRBWVNfSU5fQ0FMRU5EQVJfVklFVyAtIGRheXMubGVuZ3RoKTtcblxuICAgICAgICAgICAgZGF5cyA9IGRheXMuY29uY2F0KGZvcndhcmREYXlzKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlzLmxlbmd0aCA+IE1vbnRoLkRBWVNfSU5fQ0FMRU5EQVJfVklFVykge1xuICAgICAgICAgICAgY29uc3QgbmV4dE1vbnRoID0gdGhpcy55ZWFyLm5leHRNb250aCh0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IGZvcndhcmREYXlzID0gbmV4dE1vbnRoLmRheXMuc2xpY2UoMCwgKE1vbnRoLkRBWVNfSU5fQ0FMRU5EQVJfVklFVyArIDcpIC0gZGF5cy5sZW5ndGgpO1xuXG4gICAgICAgICAgICBkYXlzID0gZGF5cy5jb25jYXQoZm9yd2FyZERheXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRheXMucmVkdWNlKChhY2M6IElEYXlbXVtdLCBjdXJyOiBJRGF5LCBpOiBudW1iZXIpID0+IHtcblxuICAgICAgICAgICAgaWYgKGN1cnIuZGF5T2ZXZWVrID09PSBtb250aENvbmZpZy5maXJzdERheSB8fCBpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWNjLnB1c2goW10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKCFtb250aENvbmZpZy5oaWRlV2Vla2VuZHMgfHwgIWN1cnIuaXNXZWVrZW5kKSAmJiBhY2NbYWNjLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgYWNjW2FjYy5sZW5ndGggLSAxXS5wdXNoKGN1cnIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCBuZXcgQXJyYXk8QXJyYXk8SURheT4+KCkpO1xuXG4gICAgfVxuXG5cblxuXG59XG4iXX0=